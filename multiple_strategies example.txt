// From Zack Gollwitzer
// Course: Passport JS User Authentication

const LocalStrategy = require("passport-local")
const bcrypt = require("bcryptjs");
const { Admin, User } = require("../db/models")

module.exports = (passport) => {
    passport.serializeUser((obj, done) => {
        if (obj instanceof Admin) {
            return done(null, { id: obj.id, type: 'Admin' })
        } else {
            return done(null, { id: obj.id, type: 'User' })
        }
    });

    passport.deserializeUser((obj, done) => {
        if (obj.type === 'Admin') {
            Admin.findById(obj.id)
                .then(doc => done(null, doc))
                .catch(err => console.log(err))
        } else {
            User.findById(obj.id)
                .then(doc => done(null, doc))
                .catch(err => console.log(err));
        }
    });

    passport.use('login', new LocalStrategy({
        usernameField: 'email'
    }, (email, password, done) => {
        User
            .findOne({ email })
            .then(user => {
                if (!user) {
                    return done(null, false, { message: "password or email do not match database." });
                }
                if (!bcrypt.compareSync(password, user.password)) {
                    return done(null, false, { message: "password or email do not match database." });
                }
                return done(null, user);
            })
            .catch(err => console.log(err))
    })
    );

    passport.use('register', new LocalStrategy({
        usernameField: 'email',
        passwordField: 'password',
        passReqToCallback: true
    }, (req, email, password, done) => {
        User.findOne({ email })
            .then(user => {
                if (user) {
                    return done(null, false, { message: `${req.query.email} is already registered to the database` });
                } else {
                    let { firstName, lastName, email, isAdmin } = req.query
                    password = bcrypt.hashSync(password, 10)
                    let newUser = new User({ firstName, lastName, email, password, isAdmin });
                    newUser
                        .save()
                        .then(user => done(null, user))
                        .catch(err => done(err))
                }
            }).catch(err => done(err))
    }));

    passport.use('admin-login', new LocalStrategy({ usernameField: 'userId' }, (userId, password, done) => {
        User
            .findOne({ userId })
            .then(data => {
                if (!data) {
                    return done(null, false, { message: "password or email do not match database." });
                }
                if (!bcrypt.compareSync(password, data.password)) {
                    return done(null, false, { message: "password or email do not match database." });
                }
                return done(null, data);
            })
            .catch(err => console.log(err))
    })
    );

    passport.use('admin-register', new LocalStrategy({
        usernameField: 'userId',
        passwordField: 'password',
        passReqToCallback: true
    }, (req, userId, password, done) => {
        User.findOne({ userId })
            .then(user => {
                if (user) {
                    return done(null, false, { message: `User is already registered to the database` });
                } else {
                    let { username } = req.query || null
                    password = bcrypt.hashSync(password, 10)
                    let newAdmin = new Admin({ userId, username, password });
                    newAdmin
                        .save()
                        .then(user => done(null, user))
                        .catch(err => done(err))
                }
            }).catch(err => done(err))
    }));

}